plugins {
    id 'org.springframework.boot' version '2.2.5.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    /* Referenced from https://github.com/spring-projects/spring-restdocs/tree/master/samples/web-test-client */
    /* for rest docs */
    id 'org.asciidoctor.convert' version '1.5.8'
    /* generate image and then push it to DockerHub */
    id 'com.google.cloud.tools.jib' version '2.1.0'
}

group = 'team.star'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

/* ====== specify DockerHub repo By Google JIB framework ====== */
// if logged on your local docker, you don't need to configure the following two global variable
if (!hasProperty("DOCKER_HUB_USERNAME") || !hasProperty("DOCKER_HUB_USERNAME")) {
    jib.to.image = "purplemystic/blog"
} else {
    // Or, you need configure them in gradle.properties and use them as follow.
    jib {
        from {
            image = "openjdk:${sourceCompatibility}"
            auth {
                username = DOCKER_HUB_USERNAME
                password = DOCKER_HUB_PASSWORD
            }
        }
        to {
            image = "${DOCKER_HUB_USERNAME}/blog"
            auth {
                username = DOCKER_HUB_USERNAME // Defined in 'gradle.properties'.
                password = DOCKER_HUB_PASSWORD
            }
        }
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/libs-snapshot' }
}

/* for rest docs */
ext {
    set('snippetsDir', file('build/generated-snippets'))
    set('spring-restdocs.version', '2.0.4.RELEASE')
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    runtimeOnly 'io.r2dbc:r2dbc-postgresql'
    runtimeOnly 'org.postgresql:postgresql'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.springframework.boot:spring-boot-test-autoconfigure-r2dbc'
    testImplementation 'io.projectreactor:reactor-test'
    /* for rest docs */
    testImplementation "org.springframework.restdocs:spring-restdocs-webtestclient:${project.ext['spring-restdocs.version']}"
    asciidoctor "org.springframework.restdocs:spring-restdocs-asciidoctor:${project.ext['spring-restdocs.version']}"
}

test {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

asciidoctor {
    attributes 'snippets': snippetsDir
    inputs.dir snippetsDir
    dependsOn test
}

/*githubPages {
    repoUri = 'https://github.com/PurpleMystic-star/blog.git'
    credentials {
        username = project.hasProperty('githubToken') ? project.githubToken : ''
        password = ''
    }

    pages {
        from 'build/asciidoc/html5'
    }
}*/

bootJar {
    dependsOn asciidoctor
    from("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}
